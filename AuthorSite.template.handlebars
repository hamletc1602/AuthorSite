# BraeVitae AuthorSite Template
#
# Copyright 2022 BraeVitae Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
AWSTemplateFormatVersion: 2010-09-09
Description: >
  BraeVitae Simple Static Website generator{{#subDomain}} for subdomain sites{{else}}{{#domain}} for top-level domain sites{{/domain}}{{/subDomain}} (https://github.com/hamletc1602/AuthorSite)

  Copyright 2022 BraeVitae Inc. Apache License 2.0

  NOTE: Stack name may NOT contain any upper-case letters!

Parameters:
  {{#if domain}}
  DomainName:
    Type: String
    Description: Enter the {{#if subDomain}}sub{{/if}}domain name to use for this site.
  {{/if}}
  {{#if subDomain}}
  DomainZoneId:
    Type: AWS::Route53::HostedZone::Id
    Description: If the domain name entered above is a subdomain of an existing registered domain in your AWS account, enter it's zone ID here. AWS charges USD 0.50$ for each top level domain.
  {{/if}}
  UploaderPassword:
    Type: String
    NoEcho: true
    Description: Enter an initial password for the website admin app. You must enter at least 8 characters.
  FeedbackEmail:
    Type: String
    Description: Recipient address for feedback emails.
  SiteGenerator:
    Type: String
    Default: '{{sourceBucket}}:AutoSite{{version}}/lambdas/authorsite.zip'
    Description: The site generator app to use for this site, from the list of publshed generators.
  SharedStorage:
    Description: (OPTIONAL) For your first site, create a shared storage area that can be used by all sites to share saved template data.
    Default: Yes, this is my first site in this account
    Type: String
    AllowedValues:
      - Yes, this is my first site in this account
      - No, I am creating an additional site in the same account
  SharedStorageName:
    Type: String
    Description: (OPTIONAL) Name of a previously created shared storage bucket to link to this stack.
  DirectAccess:
    Description: Create a user and credentials for direct access to files in the preview site.
    Default: No
    Type: String
    AllowedValues:
      - Yes
      - No

Conditions:
  SharedBucket: !Equals [!Ref SharedStorage, 'Yes, this is my first site in this account']
  AllowDirectAccess: !Equals [!Ref DirectAccess, 'Yes']

Resources:
  SharedData:
    Type: 'AWS::S3::Bucket'
    Condition: SharedBucket
    Properties:
      BucketName:  !Join ['-',[!Ref AWS::StackName,'shared']]
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: 'Service'
          Value: !Ref 'AWS::StackName'

  WebData:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref AWS::StackName
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: 'Service'
          Value: !Ref 'AWS::StackName'

  TestWebData:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Join ['.', ['test', !Ref AWS::StackName]]
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: 'Service'
          Value: !Ref 'AWS::StackName'

  # Bucket name matches the related admin lambda function
  AdminData:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Join ['-',[!Ref AWS::StackName,'admin']]
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: 'Service'
          Value: !Ref 'AWS::StackName'

  # Bucket name closely related to admin lambda function
  AdminUiData:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Join ['-',[!Ref AWS::StackName,'admin-ui']]
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: 'Service'
          Value: !Ref 'AWS::StackName'

  WebDataAccess:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: Limit bucket access to CloudFront

  TestWebDataAccess:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: Limit bucket access to CloudFront

  AdminUiDataAccess:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: Limit bucket access to CloudFront

  WebDataAccessPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebData
      PolicyDocument:
        Version: 2008-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Join [' ', ['arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity', !Ref WebDataAccess]]
            Action:
              - 's3:GetObject'
            Resource: !Join ['', [!GetAtt WebData.Arn, '/*']]

  TestWebDataAccessPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref TestWebData
      PolicyDocument:
        Version: 2008-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Join [' ', ['arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity', !Ref TestWebDataAccess]]
            Action:
              - 's3:GetObject'
            Resource: !Join ['', [!GetAtt TestWebData.Arn, '/*']]

  AdminUiDataAccessPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AdminUiData
      PolicyDocument:
        Version: 2008-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Join [' ', ['arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity', !Ref AdminUiDataAccess]]
            Action:
              - 's3:GetObject'
            Resource: !Join ['', [!GetAtt AdminUiData.Arn, '/*']]

  WebCacheLogs:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Join ['', [!Ref AWS::StackName, '-logs']]
      AccessControl: Private
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: CleanupRule
            Status: Enabled
            ExpirationInDays: 90
      Tags:
        - Key: 'Service'
          Value: !Ref 'AWS::StackName'

  {{#domain}}

  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      CertificateTransparencyLoggingPreference: ENABLED
      DomainName: !Ref DomainName
      ValidationMethod: DNS
      SubjectAlternativeNames:
        - !Join ['.', ['www', !Ref DomainName]]
      DomainValidationOptions:
        {{#subDomain}}
        - DomainName: !Ref DomainName
          HostedZoneId: !Ref DomainZoneId
        - DomainName: !Join ['.', ['www', !Ref DomainName]]
          HostedZoneId: !Ref DomainZoneId
        {{else}}
        - DomainName: !Ref DomainName
          HostedZoneId: !Ref Domain
        - DomainName: !Join ['.', ['www', !Ref DomainName]]
          HostedZoneId: !Ref Domain
        {{/subDomain}}
      Tags:
        - Key: 'Service'
          Value: !Ref 'AWS::StackName'

  TestCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      CertificateTransparencyLoggingPreference: ENABLED
      DomainName: !Join ['.', ['test', !Ref DomainName]]
      ValidationMethod: DNS
      SubjectAlternativeNames:
        - !Join ['.', ['www', 'test', !Ref DomainName]]
      DomainValidationOptions:
        {{#subDomain}}
        - DomainName: !Join ['.', ['test', !Ref DomainName]]
          HostedZoneId: !Ref DomainZoneId
        - DomainName: !Join ['.', ['www', 'test', !Ref DomainName]]
          HostedZoneId: !Ref DomainZoneId
        {{else}}
        - DomainName: !Join ['.', ['test', !Ref DomainName]]
          HostedZoneId: !Ref Domain
        - DomainName: !Join ['.', ['www', 'test', !Ref DomainName]]
          HostedZoneId: !Ref Domain
        {{/subDomain}}
      Tags:
        - Key: 'Service'
          Value: !Ref 'AWS::StackName'

  {{/domain}}

  WebCache:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Enabled: true
        HttpVersion: http2and3
        {{#domain}}
        Aliases:
          - !Ref DomainName
          - !Join ['.', ['www', !Ref DomainName]]
        ViewerCertificate:
            AcmCertificateArn: !Ref Certificate
            SslSupportMethod: sni-only
            MinimumProtocolVersion: TLSv1.2_2018
        {{else}}
        ViewerCertificate:
            CloudFrontDefaultCertificate: true
        {{/domain}}
        DefaultRootObject: index.html
        Origins:
          - Id: WebData
            DomainName: !GetAtt WebData.DomainName
            S3OriginConfig:
              OriginAccessIdentity: !Join ['', ['origin-access-identity/cloudfront/', !Ref WebDataAccess]]
          - Id: AdminUiData
            DomainName: !GetAtt AdminUiData.DomainName
            S3OriginConfig:
              OriginAccessIdentity: !Join ['', ['origin-access-identity/cloudfront/', !Ref AdminUiDataAccess]]
        DefaultCacheBehavior:
          TargetOriginId: WebData
          ViewerProtocolPolicy: allow-all
          ForwardedValues:
            QueryString: false
            Headers:
              - CloudFront-Is-Mobile-Viewer
          LambdaFunctionAssociations:
            - EventType: origin-request
              LambdaFunctionARN: !Ref OnCacheVersion
        CacheBehaviors:
          - PathPattern: azn/*
            TargetOriginId: WebData
            ViewerProtocolPolicy: allow-all
            ForwardedValues:
              QueryString: false
              Headers:
                - CloudFront-Viewer-Country
            LambdaFunctionAssociations:
              - EventType: origin-request
                LambdaFunctionARN: !Ref OnAznVersion
          - PathPattern: feedback/*
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            TargetOriginId: WebData
            ViewerProtocolPolicy: allow-all
            ForwardedValues:
              QueryString: false
              Headers:
                - CloudFront-Viewer-Country
            LambdaFunctionAssociations:
              - EventType: viewer-request
                LambdaFunctionARN: !Ref OnFeedbackVersion
                IncludeBody: true
          - PathPattern: recovery/*
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            TargetOriginId: AdminUiData
            ViewerProtocolPolicy: allow-all
            ForwardedValues:
              QueryString: true
            LambdaFunctionAssociations:
              - EventType: viewer-request
                LambdaFunctionARN: !Ref OnAdminVersion
                IncludeBody: true
              - EventType: origin-request
                LambdaFunctionARN: !Ref OnCacheVersion
                IncludeBody: true
          - PathPattern: admin/*
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            TargetOriginId: AdminUiData
            ViewerProtocolPolicy: allow-all
            ForwardedValues:
              QueryString: true
            LambdaFunctionAssociations:
              - EventType: viewer-request
                LambdaFunctionARN: !Ref OnAdminVersion
                IncludeBody: true
              - EventType: origin-request
                LambdaFunctionARN: !Ref OnCacheVersion
                IncludeBody: true
          - PathPattern: /content/*
            TargetOriginId: AdminUiData
            ViewerProtocolPolicy: allow-all
            ForwardedValues:
              QueryString: false
          - PathPattern: /logs/*
            TargetOriginId: AdminUiData
            ViewerProtocolPolicy: allow-all
            ForwardedValues:
              QueryString: false
        CustomErrorResponses:
          - ErrorCachingMinTTL: 300
            ErrorCode: 403
            ResponseCode: 404
            ResponsePagePath: '/index.html'
        Logging:
          Bucket: !GetAtt WebCacheLogs.DomainName
          Prefix: 'main'
      Tags:
        - Key: 'Service'
          Value: !Ref 'AWS::StackName'

  TestWebCache:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Enabled: true
        {{#domain}}
        Aliases:
          - !Join ['.', ['test', !Ref DomainName]]
          - !Join ['.', ['www', 'test', !Ref DomainName]]
        ViewerCertificate:
            AcmCertificateArn: !Ref TestCertificate
            SslSupportMethod: sni-only
            MinimumProtocolVersion: TLSv1.2_2018
        {{else}}
        ViewerCertificate:
            CloudFrontDefaultCertificate: true
        {{/domain}}
        DefaultRootObject: index.html
        Origins:
          - Id: TestWebData
            DomainName: !GetAtt TestWebData.DomainName
            S3OriginConfig:
              OriginAccessIdentity: !Join ['', ['origin-access-identity/cloudfront/', !Ref TestWebDataAccess]]
          - Id: AdminUiData
            DomainName: !GetAtt AdminUiData.DomainName
            S3OriginConfig:
              OriginAccessIdentity: !Join ['', ['origin-access-identity/cloudfront/', !Ref AdminUiDataAccess]]
        DefaultCacheBehavior:
          TargetOriginId: TestWebData
          ViewerProtocolPolicy: allow-all
          ForwardedValues:
            QueryString: false
            Headers:
              - CloudFront-Is-Mobile-Viewer
          LambdaFunctionAssociations:
            - EventType: origin-request
              LambdaFunctionARN: !Ref OnCacheVersion
        CacheBehaviors:
          - PathPattern: azn/*
            TargetOriginId: TestWebData
            ViewerProtocolPolicy: allow-all
            ForwardedValues:
              QueryString: false
              Headers:
                - CloudFront-Viewer-Country
            LambdaFunctionAssociations:
              - EventType: origin-request
                LambdaFunctionARN: !Ref OnAznVersion
          - PathPattern: feedback/*
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            TargetOriginId: TestWebData
            ViewerProtocolPolicy: allow-all
            ForwardedValues:
              QueryString: false
              Headers:
                - CloudFront-Viewer-Country
            LambdaFunctionAssociations:
              - EventType: viewer-request
                LambdaFunctionARN: !Ref OnFeedbackVersion
                IncludeBody: true
          - PathPattern: admin/*
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            TargetOriginId: AdminUiData
            ViewerProtocolPolicy: allow-all
            ForwardedValues:
              QueryString: true
            LambdaFunctionAssociations:
              - EventType: viewer-request
                LambdaFunctionARN: !Ref OnAdminVersion
                IncludeBody: true
              - EventType: origin-request
                LambdaFunctionARN: !Ref OnCacheVersion
                IncludeBody: true
          - PathPattern: recovery/*
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            TargetOriginId: AdminUiData
            ViewerProtocolPolicy: allow-all
            ForwardedValues:
              QueryString: true
            LambdaFunctionAssociations:
              - EventType: viewer-request
                LambdaFunctionARN: !Ref OnAdminVersion
                IncludeBody: true
              - EventType: origin-request
                LambdaFunctionARN: !Ref OnCacheVersion
                IncludeBody: true
          - PathPattern: /content/*
            TargetOriginId: AdminUiData
            ViewerProtocolPolicy: allow-all
            ForwardedValues:
              QueryString: false
          - PathPattern: /logs/*
            TargetOriginId: AdminUiData
            ViewerProtocolPolicy: allow-all
            ForwardedValues:
              QueryString: false
        CustomErrorResponses:
          - ErrorCachingMinTTL: 300
            ErrorCode: 403
            ResponseCode: 404
            ResponsePagePath: '/index.html'
        Logging:
          Bucket: !GetAtt WebCacheLogs.DomainName
          Prefix: 'test'
      Tags:
        - Key: 'Service'
          Value: !Ref 'AWS::StackName'

  OnCache:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: 'Allow use of frlendly (no .html ending) URLs and route to mobile-specifc site pages for phones.'
      FunctionName: !Join ['-',[!Ref AWS::StackName,'edge']]
      PackageType: Zip
      Runtime: nodejs16.x
      Role: !GetAtt LambdaRole.Arn
      Tags:
        - Key: 'Service'
          Value: !Ref 'AWS::StackName'
      Handler: edge.onCache
      Code:
        S3Bucket: '{{sourceBucket}}'
        S3Key: 'AutoSite{{version}}/lambdas/edge.zip'

  OnCacheLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${OnCache}"
      RetentionInDays: 30

  OnCacheVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !GetAtt OnCache.Arn

  OnAzn:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: 'Use country-code header to translate ASIN URL to the correct country for the user''s locale.'
      FunctionName: !Join ['-',[!Ref AWS::StackName,'azn-url']]
      PackageType: Zip
      Runtime: nodejs16.x
      Role: !GetAtt LambdaRole.Arn
      Tags:
        - Key: 'Service'
          Value: !Ref 'AWS::StackName'
      Handler: edge.onAzn
      Code:
        S3Bucket: '{{sourceBucket}}'
        S3Key: 'AutoSite{{version}}/lambdas/edge.zip'

  OnAznLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${OnAzn}"
      RetentionInDays: 30

  OnAznVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !GetAtt OnAzn.Arn

  FeedbackTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !Ref FeedbackEmail
          Protocol: email
      Tags:
        - Key: 'Service'
          Value: !Ref 'AWS::StackName'
      TopicName: !Join ['-',[!Ref AWS::StackName,'l-publish']]

  OnFeedback:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: 'Save submitted feedback to an S3 bucket.'
      FunctionName: !Join ['-',[!Ref AWS::StackName,'feedback']]
      PackageType: Zip
      Runtime: nodejs16.x
      Role: !GetAtt LambdaFeedbackRole.Arn
      Tags:
        - Key: 'Service'
          Value: !Ref 'AWS::StackName'
      Handler: feedback.onFeedback
      Code:
        S3Bucket: '{{sourceBucket}}'
        S3Key: 'AutoSite{{version}}/lambdas/edge.zip'

  OnFeedbackLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${OnFeedback}"
      RetentionInDays: 30

  OnFeedbackVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !GetAtt OnFeedback.Arn

  StateQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Join ['', [!Ref AWS::StackName, '.fifo']]
      FifoQueue: true
      MessageRetentionPeriod: 1209600  # 14 Days
      ReceiveMessageWaitTimeSeconds: 0  # Ensure short polling
      ContentBasedDeduplication: true
      Tags:
        - Key: 'Service'
          Value: !Ref 'AWS::StackName'

  FeedbackPublisher:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: 'On schedule, read submitted feedback from an S3 bucket and send any new feedback to an SNS topic.'
      FunctionName: !Join ['-',[!Ref AWS::StackName,'publisher']]
      PackageType: Zip
      Runtime: nodejs16.x
      Timeout: 30
      Role: !GetAtt FeedbackPublisherRole.Arn
      Tags:
        - Key: 'Service'
          Value: !Ref 'AWS::StackName'
      Handler: feedback.publisher
      Environment:
        Variables:
          BUCKET: !Ref AdminData
          TOPIC: !Ref FeedbackTopic
          stateQueueUrl: !Ref StateQueue
      Code:
        S3Bucket: '{{sourceBucket}}'
        S3Key: 'AutoSite{{version}}/lambdas/edge.zip'

  FeedbackPublisherLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${FeedbackPublisher}"
      RetentionInDays: 30

  FeedbackPubisherSchedule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Join ['_',[!Ref AWS::StackName,'Feedback-Publisher']]
      RoleArn: !GetAtt FeedbackPublisherRole.Arn
      ScheduleExpression: cron(0/15 * * * ? *)
      Targets:
        - Id: FeedbackPublisher
          Arn: !GetAtt FeedbackPublisher.Arn

  FeedbackPublisherPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt FeedbackPublisher.Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt FeedbackPubisherSchedule.Arn

  OnAdmin:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: 'Site admin interface'
      FunctionName: !Join ['-',[!Ref AWS::StackName,'admin']]
      PackageType: Zip
      Runtime: nodejs16.x
      Role: !GetAtt AdminRole.Arn
      Timeout: 5
      Tags:
        - Key: 'Service'
          Value: !Ref 'AWS::StackName'
      Handler: admin.handler
      Code:
        S3Bucket: '{{sourceBucket}}'
        S3Key: 'AutoSite{{version}}/lambdas/edge.zip'

  OnAdminLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${OnAdmin}"
      RetentionInDays: 30

  OnAdminAsyncConfig:
    Type: AWS::Lambda::EventInvokeConfig
    Properties:
      FunctionName: !Ref OnAdmin
      Qualifier: $LATEST
      MaximumRetryAttempts: 0

  OnAdminVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !GetAtt OnAdmin.Arn

  BuildSiteNMLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: !Join ['-',[!Ref AWS::StackName,'build-site']]
      Description: Node Modules dir for build site lambda
      CompatibleArchitectures:
        - 'x86_64'
      CompatibleRuntimes:
        - 'nodejs16.x'
      Content:
        S3Bucket: '{{sourceBucket}}'
        S3Key: 'AutoSite{{version}}/layers/authorsite.layer.zip'

  BuildSite:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: 'Worker that builds the site from config in S3 and publishes the site back to S3'
      FunctionName: !Join ['-',[!Ref AWS::StackName,'builder']]
      PackageType: Zip
      Runtime: nodejs16.x
      Role: !GetAtt BuildSiteRole.Arn
      MemorySize: 1024
      Timeout: 900
      Tags:
        - Key: 'Service'
          Value: !Ref 'AWS::StackName'
      Handler: app/index.handler
      Environment:
        Variables:
          publicBucket: '{{sourceBucket}}'
          version: '{{version}}'
          # Direct ref to AdminData bucket here causes cycle because of bucket change notification config where BuildSite is the target
          #adminBucket: !Ref AdminData
          adminBucket: !Join ['-',[!Ref AWS::StackName,'admin']]
          adminUiBucket: !Ref AdminUiData
          testSiteBucket: !Ref TestWebData
          siteBucket: !Ref WebData
          stateQueueUrl: !Ref StateQueue
          {{#domain}}
          domainName: !Ref DomainName
          {{/domain}}
      Code:
        S3Bucket: !Select [0, !Split [':', !Ref SiteGenerator]]
        S3Key: !Select [1, !Split [':', !Ref SiteGenerator]]
      Layers:
        - !Ref BuildSiteNMLayer

  BuildSiteLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${BuildSite}"
      RetentionInDays: 30

  BuildSiteAsyncConfig:
    Type: AWS::Lambda::EventInvokeConfig
    Properties:
      FunctionName: !Ref BuildSite
      Qualifier: $LATEST
      MaximumRetryAttempts: 0

  LambdaInvokeFromAdminPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt BuildSite.Arn
      Action: 'lambda:InvokeFunction'
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !GetAtt AdminData.Arn

  AdminWorkerNMLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: !Join ['-',[!Ref AWS::StackName,'admin-worker']]
      Description: Node Modules dir for admin worker lambda
      CompatibleArchitectures:
        - 'x86_64'
      CompatibleRuntimes:
        - 'nodejs16.x'
      Content:
        S3Bucket: '{{sourceBucket}}'
        S3Key: 'AutoSite{{version}}/layers/admin-worker.layer.zip'

  AdminWorker:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: 'Provisioning worker that builds the initial site framework'
      FunctionName: !Join ['-',[!Ref AWS::StackName,'admin-worker']]
      PackageType: Zip
      Runtime: nodejs16.x
      Role: !GetAtt AdminWorkerRole.Arn
      MemorySize: 1024
      Timeout: 300
      Tags:
        - Key: 'Service'
          Value: !Ref 'AWS::StackName'
      Handler: index.handler
      Environment:
        Variables:
          publicBucket: '{{sourceBucket}}'
          version: '{{version}}'
          sharedBucket: !If [SharedBucket, !Ref SharedData, !Ref SharedStorageName]
          adminBucket: !Ref AdminData
          adminUiBucket: !Ref AdminUiData
          testSiteBucket: !Ref TestWebData
          siteBucket: !Ref WebData
          stateQueueUrl: !Ref StateQueue
          maxAgeBrowser: 86400
          maxAgeCloudFront: 60
      Code:
        S3Bucket: '{{sourceBucket}}'
        S3Key: 'AutoSite{{version}}/lambdas/admin-worker.zip'
      Layers:
        - !Ref AdminWorkerNMLayer

  AdminWorkerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AdminWorker}"
      RetentionInDays: 30

  AdminWorkerAsyncConfig:
    Type: AWS::Lambda::EventInvokeConfig
    Properties:
      FunctionName: !Ref AdminWorker
      Qualifier: $LATEST
      MaximumRetryAttempts: 0

  StatePump:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: 'Periodic state queue check and update admin state with any messages.'
      FunctionName: !Join ['-',[!Ref AWS::StackName,'state-pump']]
      PackageType: Zip
      Runtime: nodejs16.x
      Role: !GetAtt StatePumpRole.Arn
      Timeout: 90
      Tags:
        - Key: 'Service'
          Value: !Ref 'AWS::StackName'
      Handler: statePump.handler
      Environment:
        Variables:
          adminBucket: !Ref AdminData
          adminUiBucket: !Ref AdminUiData
          stateQueueUrl: !Ref StateQueue
      Code:
        S3Bucket: '{{sourceBucket}}'
        S3Key: 'AutoSite{{version}}/lambdas/admin-worker.zip'
      Layers:
        - !Ref AdminWorkerNMLayer

  StatePumpLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${StatePump}"
      RetentionInDays: 30

  StatePumpSchedule:
    Type: 'AWS::Events::Rule'
    Properties:
      ScheduleExpression: 'cron(00 1/4 * * ? *)' # Every 4th hour
      Targets:
        - Arn: !GetAtt StatePump.Arn
          Id: '1'

  StatePumpCwPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt StatePump.Arn
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt StatePumpSchedule.Arn

  ProvisionerNMLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: !Join ['-',[!Ref AWS::StackName,'admin-worker']]
      Description: Node Modules dir for admin worker lambda
      CompatibleArchitectures:
        - 'x86_64'
      CompatibleRuntimes:
        - 'nodejs16.x'
      Content:
        S3Bucket: '{{sourceBucket}}'
        S3Key: 'AutoSite{{version}}/layers/provisioner.layer.zip'

  ProvisionSite:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: 'Provisioning worker that builds the initial site framework'
      FunctionName: !Join ['-',[!Ref AWS::StackName,'provisioner']]
      PackageType: Zip
      Runtime: nodejs16.x
      Role: !GetAtt ProvisionerRole.Arn
      Timeout: 30
      Tags:
        - Key: 'Service'
          Value: !Ref 'AWS::StackName'
      Handler: index.handler
      Code:
        S3Bucket: '{{sourceBucket}}'
        S3Key: 'AutoSite{{version}}/lambdas/provisioner.zip'
      Layers:
        - !Ref ProvisionerNMLayer

  ProvisionSiteLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${ProvisionSite}"
      RetentionInDays: 30

  ProvisionSiteAsyncConfig:
    Type: AWS::Lambda::EventInvokeConfig
    Properties:
      FunctionName: !Ref ProvisionSite
      Qualifier: $LATEST
      MaximumRetryAttempts: 0

  ProvisionSiteTrigger:
    Type: 'Custom::LambdaTrigger'
    Properties:
      ServiceToken: !GetAtt ProvisionSite.Arn
      SiteGenerator: !Ref SiteGenerator
      PublicBucket: '{{sourceBucket}}'
      Version: '{{version}}'
      SharedBucket: !If [SharedBucket, !Ref SharedData, !Ref SharedStorageName]
      AdminBucket: !Ref AdminData
      AdminUiBucket: !Ref AdminUiData
      WebDataBucket: !Ref WebData
      WebCache: !Ref WebCache
      TestWebDataBucket: !Ref TestWebData
      TestWebCache: !Ref TestWebCache
      WebLogsBucket: !Ref WebCacheLogs
      UploaderPassword: !Ref UploaderPassword
      BaseDomain: !GetAtt WebCache.DomainName
      BaseDomainTest: !GetAtt TestWebCache.DomainName
      {{#domain}}
      DomainName: !Ref DomainName
      DomainCertArn: !Ref Certificate
      DomainNameTest: !Join ['.', ['test', !Ref DomainName]]
      DomainCertTestArn: !Ref TestCertificate
      {{/domain}}
      MaxAgeBrowser: 86400
      MaxAgeCloudFront: 0
    DependsOn:
      - WebData
      - TestWebData
      - AdminData
      - AdminUiData
      - WebCacheLogs

  LambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join ['_',[!Ref AWS::StackName,'lambda']]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - edgelambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
      Tags:
        - Key: 'Service'
          Value: !Ref 'AWS::StackName'

  LambdaFeedbackRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join ['_',[!Ref AWS::StackName,'l-feedback']]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - edgelambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: S3Publish
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                Resource: !Join ['', [!GetAtt AdminData.Arn, '/feedback/*']]
        - PolicyName: logging
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
      Tags:
        - Key: 'Service'
          Value: !Ref 'AWS::StackName'

  FeedbackPublisherRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join ['_',[!Ref AWS::StackName,'l-publish']]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - edgelambda.amazonaws.com
                - events.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: S3List
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                 - 's3:ListBucket'
                Resource: !Join ['', [!GetAtt AdminData.Arn, '*']]
        - PolicyName: S3ReadWrite
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                 - 's3:PutObject'
                 - 's3:GetObject'
                 - 's3:DeleteObject'
                 - 's3:GetObjectTagging'
                 - 's3:PutObjectTagging'
                Resource: !Join ['', [!GetAtt AdminData.Arn, '/feedback/*']]
        - PolicyName: SnsPublish
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'sns:Publish'
                Resource: !Ref FeedbackTopic
        - PolicyName: logging
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
      Tags:
        - Key: 'Service'
          Value: !Ref 'AWS::StackName'

  AdminRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join ['_',[!Ref AWS::StackName,'l-admin']]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - edgelambda.amazonaws.com
                - events.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: ListS3Resources
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                 - s3:Get*
                 - s3:List*
                 - s3-object-lambda:Get*
                 - s3-object-lambda:List*
                Resource: '*'
        - PolicyName: SharedDataReadWrite
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                 - 's3:PutObject'
                 - 's3:GetObject'
                 - 's3:ListBucket'
                 - 's3:DeleteObject'
                 - 's3:GetObjectTagging'
                 - 's3:PutObjectTagging'
                Resource: !Join ['', ['arn:aws:s3:::', !If [SharedBucket, !Ref SharedData, !Ref SharedStorageName], '*']]
        - PolicyName: AdminDataReadWrite
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                 - 's3:PutObject'
                 - 's3:GetObject'
                 - 's3:ListBucket'
                 - 's3:DeleteObject'
                 - 's3:GetObjectTagging'
                 - 's3:PutObjectTagging'
                Resource: !Join ['', [!GetAtt AdminData.Arn, '*']]
        - PolicyName: WebDataReadWrite
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                 - 's3:PutObject'
                 - 's3:GetObject'
                 - 's3:ListBucket'
                 - 's3:DeleteObject'
                 - 's3:GetObjectTagging'
                 - 's3:PutObjectTagging'
                Resource: !Join ['', [!GetAtt WebData.Arn, '*']]
        - PolicyName: TestWebDataRead
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                 - 's3:GetObject'
                 - 's3:ListBucket'
                 - 's3:GetObjectTagging'
                Resource: !Join ['', [!GetAtt TestWebData.Arn, '*']]
        - PolicyName: InvokeWorkerLambdas
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                 - 'lambda:InvokeFunction'
                 - 'lambda:InvokeAsync'
                Resource: !Join ['', [!Join [':', ['arn:aws:lambda', !Ref AWS::Region, !Ref 'AWS::AccountId', 'function', !Ref AWS::StackName]], '*']]
        - PolicyName: StatusQueueAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                 - 'sqs:ReceiveMessage'
                 - 'sqs:SendMessage'
                 - 'sqs:GetQueueAttributes'
                 - 'sqs:DeleteMessage'
                Resource: !Join ['', [!Join [':', ['arn:aws:sqs', !Ref AWS::Region, !Ref 'AWS::AccountId', !Ref AWS::StackName]], '*']]
        - PolicyName: logging
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
      Tags:
        - Key: 'Service'
          Value: !Ref 'AWS::StackName'

  AdminWorkerRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join ['_',[!Ref AWS::StackName,'l-admin-worker']]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - edgelambda.amazonaws.com
                - events.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: ListS3Resources
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                 - s3:Get*
                 - s3:List*
                 - s3-object-lambda:Get*
                 - s3-object-lambda:List*
                Resource: '*'
        - PolicyName: SharedDataReadWrite
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                 - 's3:PutObject'
                 - 's3:GetObject'
                 - 's3:ListBucket'
                 - 's3:DeleteObject'
                 - 's3:GetObjectTagging'
                 - 's3:PutObjectTagging'
                Resource: !Join ['', ['arn:aws:s3:::', !If [SharedBucket, !Ref SharedData, !Ref SharedStorageName], '*']]
        - PolicyName: AdminDataReadWrite
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                 - 's3:PutObject'
                 - 's3:GetObject'
                 - 's3:ListBucket'
                 - 's3:DeleteObject'
                 - 's3:GetObjectTagging'
                 - 's3:PutObjectTagging'
                Resource: !Join ['', [!GetAtt AdminData.Arn, '*']]
        - PolicyName: WebDataReadWrite
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                 - 's3:PutObject'
                 - 's3:GetObject'
                 - 's3:ListBucket'
                 - 's3:DeleteObject'
                 - 's3:GetObjectTagging'
                 - 's3:PutObjectTagging'
                Resource: !Join ['', [!GetAtt WebData.Arn, '*']]
        - PolicyName: TestWebDataRead
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                 - 's3:GetObject'
                 - 's3:ListBucket'
                 - 's3:GetObjectTagging'
                Resource: !Join ['', [!GetAtt TestWebData.Arn, '*']]
        - PolicyName: InvokeWorkerLambdas
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                 - 'lambda:InvokeFunction'
                 - 'lambda:InvokeAsync'
                Resource: !Join ['', [!Join [':', ['arn:aws:lambda', !Ref AWS::Region, !Ref 'AWS::AccountId', 'function', !Ref AWS::StackName]], '*']]
        - PolicyName: StatusQueueAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                 - 'sqs:SendMessage'
                Resource: !Join ['', [!Join [':', ['arn:aws:sqs', !Ref AWS::Region, !Ref 'AWS::AccountId', !Ref AWS::StackName]], '*']]
        - PolicyName: CloudFront
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                 - 'cloudfront:GetDistribution'
                 - 'cloudfront:GetDistributionConfig'
                 - 'cloudfront:UpdateDistribution'
                Resource:
                 - !Join ['', ['arn:aws:cloudfront::', !Ref 'AWS::AccountId', ':distribution/', !Ref WebCache]]
                 - !Join ['', ['arn:aws:cloudfront::', !Ref 'AWS::AccountId', ':distribution/', !Ref WebCache, '*']]
                 - !Join ['', ['arn:aws:cloudfront::', !Ref 'AWS::AccountId', ':distribution/', !Ref TestWebCache]]
                 - !Join ['', ['arn:aws:cloudfront::', !Ref 'AWS::AccountId', ':distribution/', !Ref TestWebCache, '*']]
        - PolicyName: CloudFrontList
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                 - 'cloudfront:ListDistributions'
                Resource: '*'
        - PolicyName: CertificatesAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                 - 'acm:ListCertificates'
                Resource: '*'
        - PolicyName: Route53
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                 - 'route53:ListHostedZones'
                 - 'route53:ChangeResourceRecordSets'
                Resource: '*'
        - PolicyName: LogsReadAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                 - 'logs:DescribeLogStreams'
                 - 'logs:GetLogEvents'
                 - 'logs:FilterLogEvents'
                Resource: !Join ['', [!Join [':', ['arn:aws:logs', '*', !Ref 'AWS::AccountId', '']], '*']]
        - PolicyName: logging
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
      Tags:
        - Key: 'Service'
          Value: !Ref 'AWS::StackName'

  StatePumpRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join ['_',[!Ref AWS::StackName,'l-state-pump']]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - edgelambda.amazonaws.com
                - events.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: ListS3Resources
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                 - s3:Get*
                 - s3:List*
                 - s3-object-lambda:Get*
                 - s3-object-lambda:List*
                Resource: '*'
        - PolicyName: SharedDataReadWrite
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                 - 's3:PutObject'
                 - 's3:GetObject'
                 - 's3:ListBucket'
                 - 's3:DeleteObject'
                 - 's3:GetObjectTagging'
                 - 's3:PutObjectTagging'
                Resource: !Join ['', ['arn:aws:s3:::', !If [SharedBucket, !Ref SharedData, !Ref SharedStorageName], '*']]
        - PolicyName: AdminDataReadWrite
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                 - 's3:PutObject'
                 - 's3:GetObject'
                 - 's3:ListBucket'
                 - 's3:DeleteObject'
                 - 's3:GetObjectTagging'
                 - 's3:PutObjectTagging'
                Resource: !Join ['', [!GetAtt AdminData.Arn, '*']]
        - PolicyName: WebDataReadWrite
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                 - 's3:PutObject'
                 - 's3:GetObject'
                 - 's3:ListBucket'
                 - 's3:DeleteObject'
                 - 's3:GetObjectTagging'
                 - 's3:PutObjectTagging'
                Resource: !Join ['', [!GetAtt WebData.Arn, '*']]
        - PolicyName: TestWebDataRead
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                 - 's3:GetObject'
                 - 's3:ListBucket'
                 - 's3:GetObjectTagging'
                Resource: !Join ['', [!GetAtt TestWebData.Arn, '*']]
        - PolicyName: StatusQueueAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                 - 'sqs:ReceiveMessage'
                 - 'sqs:SendMessage'
                 - 'sqs:GetQueueAttributes'
                 - 'sqs:DeleteMessage'
                Resource: !Join ['', [!Join [':', ['arn:aws:sqs', !Ref AWS::Region, !Ref 'AWS::AccountId', !Ref AWS::StackName]], '*']]
        - PolicyName: logging
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
      Tags:
        - Key: 'Service'
          Value: !Ref 'AWS::StackName'

  ProvisionerRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join ['_',[!Ref AWS::StackName,'l-provision']]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - edgelambda.amazonaws.com
                - events.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: AllS3DataReadWrite
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                 - 's3:PutObject'
                 - 's3:GetObject'
                 - 's3:ListBucket'
                 - 's3:ListBucketVersions'
                 - 's3:DeleteObject'
                 - 's3:GetObjectTagging'
                 - 's3:PutObjectTagging'
                 - 's3:DeleteObjectTagging'
                Resource: '*'
        - PolicyName: logging
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
        - PolicyName: DeleteLogGroups
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'account:ListRegions'
                  - 'logs:DeleteLogGroup'
                Resource: '*'
      Tags:
        - Key: 'Service'
          Value: !Ref 'AWS::StackName'

  BuildSiteRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join ['_',[!Ref AWS::StackName,'l-builder']]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - edgelambda.amazonaws.com
                - events.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: AdminDataReadWrite
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                 - 's3:PutObject'
                 - 's3:GetObject'
                 - 's3:ListBucket'
                 - 's3:DeleteObject'
                 - 's3:GetObjectTagging'
                 - 's3:PutObjectTagging'
                # Direct ref to AdminData bucket here causes cycle because of bucket change notification config where BuildSite is the target
                #Resource: !Join ['', [!GetAtt AdminData.Arn, '*']]
                Resource: !Join ['', ['arn:aws:s3:::', !Join ['-',[!Ref AWS::StackName,'admin']], '*']]
        - PolicyName: TestWebDataReadWrite
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                 - 's3:PutObject'
                 - 's3:GetObject'
                 - 's3:ListBucket'
                 - 's3:DeleteObject'
                 - 's3:GetObjectTagging'
                 - 's3:PutObjectTagging'
                Resource: !Join ['', [!GetAtt TestWebData.Arn, '*']]
        - PolicyName: StatusQueueAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                 - 'sqs:SendMessage'
                Resource: !Join ['', [!Join [':', ['arn:aws:sqs', !Ref AWS::Region, !Ref 'AWS::AccountId', !Ref AWS::StackName]], '*']]
        - PolicyName: logging
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
      Tags:
        - Key: 'Service'
          Value: !Ref 'AWS::StackName'

  {{#domain}}

  {{#unless subDomain}}
  Domain:
    Type: 'AWS::Route53::HostedZone'
    Properties:
      Name: !Ref DomainName
      HostedZoneTags:
        - Key: Service
          Value: !Ref 'AWS::StackName'
  {{/unless}}

  DomainToWebCache:
    Type: 'AWS::Route53::RecordSetGroup'
    Properties:
      {{#subDomain}}
      HostedZoneId: !Ref DomainZoneId
      {{else}}
      HostedZoneId: !Ref Domain
      {{/subDomain}}
      RecordSets:
        - Name: !Ref DomainName
          Type: A
          AliasTarget:
            HostedZoneId: 'Z2FDTNDATAQYW2'
            DNSName: !GetAtt WebCache.DomainName
        - Name: !Ref DomainName
          Type: AAAA
          AliasTarget:
            HostedZoneId: 'Z2FDTNDATAQYW2'
            DNSName: !GetAtt WebCache.DomainName
        - Name: !Join ['.', ['www', !Ref DomainName]]
          Type: A
          AliasTarget:
            HostedZoneId: 'Z2FDTNDATAQYW2'
            DNSName: !GetAtt WebCache.DomainName
        - Name: !Join ['.', ['www', !Ref DomainName]]
          Type: AAAA
          AliasTarget:
            HostedZoneId: 'Z2FDTNDATAQYW2'
            DNSName: !GetAtt WebCache.DomainName

  TestDomainToWebCache:
    Type: 'AWS::Route53::RecordSetGroup'
    Properties:
      {{#subDomain}}
      HostedZoneId: !Ref DomainZoneId
      {{else}}
      HostedZoneId: !Ref Domain
      {{/subDomain}}
      RecordSets:
        - Name: !Join ['.', ['test', !Ref DomainName]]
          Type: A
          AliasTarget:
            HostedZoneId: 'Z2FDTNDATAQYW2'
            DNSName: !GetAtt TestWebCache.DomainName
        - Name: !Join ['.', ['test', !Ref DomainName]]
          Type: AAAA
          AliasTarget:
            HostedZoneId: 'Z2FDTNDATAQYW2'
            DNSName: !GetAtt TestWebCache.DomainName
        - Name: !Join ['.', ['www', 'test', !Ref DomainName]]
          Type: A
          AliasTarget:
            HostedZoneId: 'Z2FDTNDATAQYW2'
            DNSName: !GetAtt TestWebCache.DomainName
        - Name: !Join ['.', ['www', 'test', !Ref DomainName]]
          Type: AAAA
          AliasTarget:
            HostedZoneId: 'Z2FDTNDATAQYW2'
            DNSName: !GetAtt TestWebCache.DomainName

  {{/domain}}

  UploadUser:
    Type: AWS::IAM::User
    Condition: AllowDirectAccess
    Properties:
      UserName: !Join ['.', [!Ref AWS::StackName, 'uploader']]
      LoginProfile:
        Password: !Ref UploaderPassword
      Policies:
        - PolicyName: AccessToTestBucketOnly
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListAllMyBuckets
                  - s3:GetBucketLocation
                Resource:
                  - arn:aws:s3:::*
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  - !GetAtt TestWebData.Arn
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - !Join ['', [!GetAtt TestWebData.Arn, '/*']]
      Tags:
        - Key: 'Service'
          Value: !Ref 'AWS::StackName'

  UploadUserAccessKey:
    Type: AWS::IAM::AccessKey
    Condition: AllowDirectAccess
    Properties:
      UserName: !Ref UploadUser

Outputs:
  SiteUrl:
    Description: Base URL for the site which can be used whether there's a custom domain linked or not.
    Value: !GetAtt WebCache.DomainName
  SharedStorageName:
    Description: Name of the shared bucket. Supply this name as the 'SharedStorageName' parameter when creating other stacks.
    Value: !If [SharedBucket, !Ref SharedData, 'Not Configured']
  TestSiteBucket:
    Description: S3 bucket for test site files
    Value: !Ref TestWebData
  AccessId:
    Description: Access ID
    Value: !If [AllowDirectAccess, !Ref UploadUserAccessKey, 'Not Configured']
  AccessSecret:
    Description: Access Secret
    Value: !If [AllowDirectAccess, !GetAtt UploadUserAccessKey.SecretAccessKey, 'Not Configured']
