# BraeVitae AuthorSite Template
#
# Copyright 2022 BraeVitae Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
AWSTemplateFormatVersion: 2010-09-09
Description: >
  BraeVitae AuthorSite

  This template creates all the infrastructure necessary to host a mostly static website from an S3 bucket, with
  the following enhancements:

   - Built-in target for feeback email forms.
   - Built-in forwarder to the Amazon store for the user's country.
   - Cloaking of .html extensions on page urls.
   - Custom 404 page (returns to index.html).
   - Creates a unique key pair for uploading files to only this website's bucket.

   Copyright 2022 BraeVitae Inc. Apache License 2.0

Parameters:
  DomainName:
    Type: String
    Description: Enter the domain name to use for this site.
  DomainZoneId:
    Type: AWS::Route53::HostedZone::Id
    Description: Enter an existing zone ID to use a subdomain for this site.
    Default: ''
  UploaderPassword:
    Type: String
    NoEcho: true
    Description: Enter a password for the website files uploader user.
  FeedbackEmail:
    Type: String
    Description: Recipient address for feedback emails.

Conditions:
  TopLevelDomain: !Equals [!Ref DomainZoneId, '']

Resources:
  UploaderPasswordSecret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: !Ref DomainName
      Description: Uploader password for admin lambda
      SecretString: !Ref UploaderPassword

  WebData:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref DomainName
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: 'Service'
          Value: !Ref 'AWS::StackName'

  FeedbackData:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Join ['-',[!Join ['-',!Split ['.',!Ref DomainName]],'feedback']]
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: 'Service'
          Value: !Ref 'AWS::StackName'

  WebDataAccess:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: Limit bucket access to CloudFront

  WebDataAccessPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebData
      PolicyDocument:
        Version: 2008-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Join [' ', ['arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity', !Ref WebDataAccess]]
            Action:
              - 's3:GetObject'
            Resource: !Join ['', [!GetAtt WebData.Arn, '/*']]

  WebCacheLogs:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Join ['', [!Ref DomainName, '-logs']]
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: 'Service'
          Value: !Ref 'AWS::StackName'

  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      CertificateTransparencyLoggingPreference: ENABLED
      DomainName: !Ref DomainName
      ValidationMethod: DNS
      SubjectAlternativeNames:
        - !Join ['.', ['www', !Ref DomainName]]
      DomainValidationOptions:
        - DomainName: !Ref DomainName
          HostedZoneId: !If [TopLevelDomain, !Ref Domain, !Ref DomainZoneId]
        - DomainName: !Join ['.', ['www', !Ref DomainName]]
          HostedZoneId: !If [TopLevelDomain, !Ref Domain, !Ref DomainZoneId]
      Tags:
        - Key: 'Service'
          Value: !Ref 'AWS::StackName'

  WebCache:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: index.html
        Origins:
          - Id: WebData
            DomainName: !GetAtt WebData.DomainName
            S3OriginConfig:
              OriginAccessIdentity: !Join ['', ['origin-access-identity/cloudfront/', !Ref WebDataAccess]]
        Aliases:
          - !Ref DomainName
          - !Join ['.', ['www', !Ref DomainName]]
        ViewerCertificate:
          AcmCertificateArn: !Ref Certificate
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1
        DefaultCacheBehavior:
          TargetOriginId: WebData
          ViewerProtocolPolicy: allow-all
          ForwardedValues:
            QueryString: false
            Headers:
              - CloudFront-Is-Mobile-Viewer
          LambdaFunctionAssociations:
            - EventType: origin-request
              LambdaFunctionARN: !Ref OnCacheVersion
        CacheBehaviors:
          - PathPattern: azn/*
            TargetOriginId: WebData
            ViewerProtocolPolicy: allow-all
            ForwardedValues:
              QueryString: false
              Headers:
                - CloudFront-Viewer-Country
            LambdaFunctionAssociations:
              - EventType: origin-request
                LambdaFunctionARN: !Ref OnAznVersion
          - PathPattern: feedback/*
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            TargetOriginId: WebData
            ViewerProtocolPolicy: allow-all
            ForwardedValues:
              QueryString: false
              Headers:
                - CloudFront-Viewer-Country
            LambdaFunctionAssociations:
              - EventType: viewer-request
                LambdaFunctionARN: !Ref OnFeedbackVersion
                IncludeBody: true
          - PathPattern: admin*
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            TargetOriginId: WebData
            ViewerProtocolPolicy: allow-all
            ForwardedValues:
              QueryString: true
            LambdaFunctionAssociations:
              - EventType: viewer-request
                LambdaFunctionARN: !Ref OnAdmin
                IncludeBody: true
        CustomErrorResponses:
          - ErrorCachingMinTTL: 300
            ErrorCode: 403
            ResponseCode: 404
            ResponsePagePath: '/index.html'
        Logging:
          Bucket: !GetAtt WebCacheLogs.DomainName
          Prefix: ''
      Tags:
        - Key: 'Service'
          Value: !Ref 'AWS::StackName'

  OnCache:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: 'Allow use of frlendly (no .html ending) URLs and route to mobile-specifc site pages for phones.'
      FunctionName: !Join ['-',[!Join ['-',!Split ['.',!Ref DomainName]],'edge']]
      PackageType: Zip
      Runtime: nodejs16.x
      Role: !GetAtt LambdaRole.Arn
      Tags:
        - Key: 'Service'
          Value: !Ref 'AWS::StackName'
      Handler: edge.onCache
      Code:
        S3Bucket: 'braevitae-pub'
        S3Key: 'AutoSite/provision/lambda.zip'

  OnCacheVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !GetAtt OnCache.Arn

  OnAdmin:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: 'Site admin interface'
      FunctionName: !Join ['-',[!Join ['-',!Split ['.',!Ref DomainName]],'admin']]
      PackageType: Zip
      Runtime: nodejs16.x
      Role: !GetAtt LambdaRole.Arn
      Tags:
        - Key: 'Service'
          Value: !Ref 'AWS::StackName'
      Handler: index.handler
      Code:
        S3Bucket: 'braevitae-pub'
        S3Key: 'AutoSite/AdminUI/autosite-admin.zip'

  OnAdminVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !GetAtt OnAdmin.Arn

  BuildSite:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: 'Worker that builds the site from config in S3 and publishes the site back to S3'
      FunctionName: !Join ['-',[!Join ['-',!Split ['.',!Ref DomainName]],'builder']]
      PackageType: Zip
      Runtime: nodejs16.x
      Role: !GetAtt LambdaRole.Arn
      Timeout: 60
      Tags:
        - Key: 'Service'
          Value: !Ref 'AWS::StackName'
      Handler: app/index.handler
      Environment:
        Variables:
          siteDomain: !Ref DomainName
      Code:
        S3Bucket: 'braevitae-pub'
        S3Key: 'AutoSite/builders/authorsite.zip'

  BuildSiteVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !GetAtt BuildSite.Arn

  OnAzn:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: 'Use country-code header to translate ASIN URL to the correct country for the user''s locale.'
      FunctionName: !Join ['-',[!Join ['-',!Split ['.',!Ref DomainName]],'azn-url']]
      PackageType: Zip
      Runtime: nodejs16.x
      Role: !GetAtt LambdaRole.Arn
      Tags:
        - Key: 'Service'
          Value: !Ref 'AWS::StackName'
      Handler: edge.onAzn
      Code:
        S3Bucket: 'braevitae-pub'
        S3Key: 'AutoSite/provision/lambda.zip'

  OnAznVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !GetAtt OnAzn.Arn

  FeedbackTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !Ref FeedbackEmail
          Protocol: email
      Tags:
        - Key: 'Service'
          Value: !Ref 'AWS::StackName'
      TopicName: !Join ['-',[!Join ['-',!Split ['.',!Ref DomainName]],'l-publish']]

  OnFeedback:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: 'Save submitted feedback to an S3 bucket.'
      FunctionName: !Join ['-',[!Join ['-',!Split ['.',!Ref DomainName]],'feedback']]
      PackageType: Zip
      Runtime: nodejs16.x
      Role: !GetAtt LambdaFeedbackRole.Arn
      Tags:
        - Key: 'Service'
          Value: !Ref 'AWS::StackName'
      Handler: feedback.onFeedback
      Code:
        S3Bucket: 'braevitae-pub'
        S3Key: 'AutoSite/provision/lambda.zip'

  OnFeedbackVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !GetAtt OnFeedback.Arn

  FeedbackPublisher:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: 'On schedule, read submitted feedback from an S3 bucket and send any new feedback to an SNS topic.'
      FunctionName: !Join ['-',[!Join ['-',!Split ['.',!Ref DomainName]],'publisher']]
      PackageType: Zip
      Runtime: nodejs16.x
      Timeout: 30
      Role: !GetAtt FeedbackPublisherRole.Arn
      Tags:
        - Key: 'Service'
          Value: !Ref 'AWS::StackName'
      Handler: feedback.publisher
      Environment:
        Variables:
          BUCKET: !Ref FeedbackData
          TOPIC: !Ref FeedbackTopic
      Code:
        S3Bucket: 'braevitae-pub'
        S3Key: 'AutoSite/provision/lambda.zip'

  FeedbackPubisherSchedule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Join ['_',[!Join ['-',!Split ['.',!Ref DomainName]],'Feedback-Publisher']]
      RoleArn: !GetAtt FeedbackPublisherRole.Arn
      ScheduleExpression: cron(0/15 * * * ? *)
      Targets:
        - Id: FeedbackPublisher
          Arn: !GetAtt FeedbackPublisher.Arn

  FeedbackPublisherPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt FeedbackPublisher.Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt FeedbackPubisherSchedule.Arn

  LambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join ['_',[!Join ['-',!Split ['.',!Ref DomainName]],'lambda']]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - edgelambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
      Tags:
        - Key: 'Service'
          Value: !Ref 'AWS::StackName'

  LambdaFeedbackRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join ['_',[!Join ['-',!Split ['.',!Ref DomainName]],'l-feedback']]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - edgelambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: S3Publish
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                Resource: !Join ['', [!GetAtt FeedbackData.Arn, '*']]
        - PolicyName: logging
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
      Tags:
        - Key: 'Service'
          Value: !Ref 'AWS::StackName'

  FeedbackPublisherRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join ['_',[!Join ['-',!Split ['.',!Ref DomainName]],'l-publish']]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - edgelambda.amazonaws.com
                - events.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: S3ReadWrite
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                 - 's3:PutObject'
                 - 's3:GetObject'
                 - 's3:ListBucket'
                 - 's3:DeleteObject'
                 - 's3:GetObjectTagging'
                 - 's3:PutObjectTagging'
                Resource: !Join ['', [!GetAtt FeedbackData.Arn, '*']]
        - PolicyName: SnsPublish
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'sns:Publish'
                Resource: !Ref FeedbackTopic
        - PolicyName: logging
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
      Tags:
        - Key: 'Service'
          Value: !Ref 'AWS::StackName'

  Domain:
    Type: 'AWS::Route53::HostedZone'
    Condition: TopLevelDomain
    Properties:
      Name: !Ref DomainName
      HostedZoneTags:
        - Key: Service
          Value: !Ref 'AWS::StackName'

  DomainToWebCache:
    Type: 'AWS::Route53::RecordSetGroup'
    Properties:
      HostedZoneId: !If [TopLevelDomain, !Ref Domain, !Ref DomainZoneId]
      RecordSets:
        - Name: !Ref DomainName
          Type: A
          AliasTarget:
            HostedZoneId: !If [TopLevelDomain, !Ref Domain, !Ref DomainZoneId]
            DNSName: !GetAtt WebCache.DomainName
        - Name: !Ref DomainName
          Type: AAAA
          AliasTarget:
            HostedZoneId: !If [TopLevelDomain, !Ref Domain, !Ref DomainZoneId]
            DNSName: !GetAtt WebCache.DomainName
        - Name: !Join ['.', ['www', !Ref DomainName]]
          Type: A
          AliasTarget:
            HostedZoneId: !If [TopLevelDomain, !Ref Domain, !Ref DomainZoneId]
            DNSName: !GetAtt WebCache.DomainName
        - Name: !Join ['.', ['www', !Ref DomainName]]
          Type: AAAA
          AliasTarget:
            HostedZoneId: !If [TopLevelDomain, !Ref Domain, !Ref DomainZoneId]
            DNSName: !Join ['.', ['www', !Ref DomainName]]

  UploadUser:
    Type: AWS::IAM::User
    Properties:
      UserName: !Join ['.', [!Ref DomainName, 'uploader']]
      LoginProfile:
        Password: !Ref UploaderPassword
      Policies:
        - PolicyName: AccessToBucketOnly
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListAllMyBuckets
                  - s3:GetBucketLocation
                Resource:
                  - arn:aws:s3:::*
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  - !GetAtt WebData.Arn
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - !Join ['', [!GetAtt WebData.Arn, '/*']]
      Tags:
        - Key: 'Service'
          Value: !Ref 'AWS::StackName'

  UploadUserAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref UploadUser

Outputs:
  AccessId:
    Description: Access ID
    Value: !Ref UploadUserAccessKey
  AccessSecret:
    Description: Access Secret
    Value: !GetAtt UploadUserAccessKey.SecretAccessKey
